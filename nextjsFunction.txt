/**
향후 사용할 수 있는 기능
1. Middleware API 업데이트
Next.js 12에서 middleware를 도입하여 라우터의 유연성을 지원했다. 커뮤니티의 의견을 반영하여 몇 가지 추가 사항을 구현했다고 한다.
1-1. request에 header를 더 쉽게 설정할 수 있다.
1-2. rewrite 또는 redirect를 사용할 필요 없이 미들웨어에서 직접 응답을 제공할 수 있다.
// middleware.ts
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  // request header를 복제하고 새로운 header 'x-version'을 설정한다.
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set("x-version", "13");

  // NextResponse.rewrite에서 request header를 설정할 수 있다.
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  });

  // 새로운 response header 'x-version' 설정
  response.headers.set("x-version", "13");
  return response;
}
// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import { isAuthenticated } from "@lib/auth";

// 미들웨어를 `/api`로 시작하는 경로로 제한
export const config = {
  matcher: "/api/:function*",
};

export function middleware(request: NextRequest) {
  // 요청에 대한 인증 확인
  if (!isAuthenticated(request)) {
    // 오류 메시지를 나타내는 json으로 응답
    return NextResponse.json(
      {
        success: false,
        message: "Auth failed",
      },
      {
        status: 401,
      }
    );
  }
}
// next.config.js
const nextConfig = {
  experimental: {
    allowMiddlewareResponseBody: true,
  },
};
*/
/**
크롬 64+
엣지 79+
파이어폭스 67+
오페라 51+
사파리 12+
 */

/**
getStaticProps, getStaticPaths 소스코드 예제
pages/[slug].js

import React from 'react';

const BlogPost = ({ post }) => {
  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  );
};

export async function getStaticProps({ params }) {
  // params.slug를 사용하여 해당 포스트 데이터를 가져옵니다.
  const res = await fetch(`https://api.example.com/posts/${params.slug}`);
  const post = await res.json();

  return {
    props: {
      post,
    },
  };
}

export async function getStaticPaths() {
  // 모든 포스트의 경로를 가져옵니다.
  const res = await fetch('https://api.example.com/posts');
  const posts = await res.json();

  // 각 포스트의 경로를 반환합니다.
  const paths = posts.map((post) => ({
    params: { slug: post.slug },
  }));

  return {
    paths,
    fallback: false, // fallback: false로 설정하여 존재하지 않는 경로로 접근 시 404 페이지를 반환합니다.
  };
}

export default BlogPost;
위의 예제에서 [slug].js 파일은 동적 라우트를 위한 파일입니다. [slug]은 경로의 일부를 동적으로 받는 파라미터입니다.

getStaticProps 함수는 해당 포스트의 데이터를 가져오기 위해 params.slug를 사용합니다. getStaticPaths 함수는 모든 포스트의 경로를 가져와 paths 배열로 반환합니다.

이 예제에서는 fallback: false로 설정하여 존재하지 않는 경로로 접근 시 404 페이지를 반환하도록 합니다. fallback을 true로 설정하면 런타임 시에 요청된 경로의 데이터를 동적으로 생성하여 반환할 수 있습니다.

이 코드는 Next.js에서 정적 생성(static generation)을 위해 사용됩니다. getStaticProps는 빌드 시에 데이터를 가져와 페이지를 렌더링하며, getStaticPaths는 사전 정의된 경로를 생성하여 정적으로 생성된 페이지를 제공합니다.// pages/[slug].js

 */



